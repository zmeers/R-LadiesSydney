knitr::opts_chunk$set(echo = TRUE)
library(ussc)
library(tidyverse)
library(emo)
library(ggparliament)
australia <- election_data %>% # the data we have included is in election_data
filter(year == 2016 &  # filter for country, year, and legislative chamber
country == "Australia" &
house == "Representatives")
head(australia)
#I am reordering the data to reflect the way the Australian parliament is structured (gov't on right, opposition on left) but this isn't strictly neccesary
australia <- australia[c(1, 5, 6, 7, 4, 3, 2), ]
#run your election results through parliament_data()
aus <- parliament_data(election_data = australia, # you need to specify the data frame
total_seats = sum(australia$seats), # sum up the total amount of seats
party_seats = australia$seats, # number of seats per party
parl_rows = 4, # how many rows do we want?
type = "horseshoe") # what type of parliament do we want?
parliament_data <- function(election_data = NULL,
parl_rows = NULL,
party_seats = election_data$seats,
total_seats = sum(party_seats),
party_names = election_data$party,
type = c(
"horseshoe",
"semicircle",
"circle",
"classroom"
#"opposing_benches"
)) {
#for horseshoe shaped parliaments- e.g. Australia
if (type == "horseshoe") {
#calculate the layout of the final plot from supplied data
parl_layout <- calc_coordinates(total_seats, parl_rows, c(5.5, 7))
#add in a column for the party names
parl_layout$party <- rep(party_names, party_seats)
}
else if (type == "semicircle") {
parl_layout <- calc_coordinates(total_seats, parl_rows, c(1, 2))
parl_layout$party <- rep(party_names, party_seats)
}
else if (type == "circle") {
parl_layout <- calc_coordinates(total_seats, parl_rows, c(1, 2), segment = 1)
parl_layout$party <- rep(party_names, party_seats)
}
else if (type == "classroom") {
#calculate parl_layour by expanding a grid of rows vs the length each row needs to be
parl_layout <- expand.grid(
y = 1:parl_rows,
x = seq_len(ceiling(sum(party_seats) / parl_rows))
)
#remove the extra seats that are added by expanding a grid
#removes from either end of back row
### ROB - Clean up/ find better way // and also make work for odd numbers left over? ###
leftovers <- nrow(parl_layout) - total_seats
parl_layout <- parl_layout[-which(parl_layout$y == max(parl_layout$y) &
parl_layout$x %in% c(tail(1:max(parl_layout$x), leftovers/2),
head(1:max(parl_layout$x), leftovers/2))),]
parl_layout$party <- rep(party_names, party_seats)
}
# else if (type == "opposing_benches") {
#   result <- expand.grid(
#     x = 1:parl_rows,
#     y = seq_len(ceiling(sum(data[[party_seats]]) / parl_rows))
#   )
#
#   # vec <- rep(data[[party_names]], data[[party_seats]])
#   # result$party <- c(vec, rep(NA, nrow(result) - length(vec)))
# }
else {
warning("parliament layout not supported")
}
#bind layout results back to expanded election_data?
if(!is.null(election_data)) {
#bind the coordinates to the uncounted original data
parl_data <- tidyr::uncount(election_data, party_seats)
parl_data <- cbind(parl_data, parl_layout)
#otherwise just return the coordinates with the party names attached
} else {
parl_data <- parl_layout
}
return(parl_data)
}
#I am reordering the data to reflect the way the Australian parliament is structured (gov't on right, opposition on left) but this isn't strictly neccesary
australia <- australia[c(1, 5, 6, 7, 4, 3, 2), ]
#run your election results through parliament_data()
aus <- parliament_data(election_data = australia, # you need to specify the data frame
total_seats = sum(australia$seats), # sum up the total amount of seats
party_seats = australia$seats, # number of seats per party
parl_rows = 4, # how many rows do we want?
type = "horseshoe") # what type of parliament do we want?
calc_coordinates <- function(N, M, limits, segment = 0.5) {
#controls the spread of the seats
#tigher limits = more 'pinched' circle
radii <- seq(limits[1], limits[2], len = M)
counts <- numeric(M)
pts <- do.call(
rbind,
lapply(1:M, function(i) {
#find how many seats for this parl_row
counts[i] <<- round(N * radii[i] / sum(radii[i:M]))
#seq from 0-180degress for the row for the cartesian position
### ROB- Need to symmetry-ise this for non 0.5/1 values of segment ###
theta <- seq(0, segment * 2 * pi, len = counts[i])
#subtract the seats already plotted from N
#N becomes 'seats left to calculate'
N <<- N - counts[i]
#wrap this into a df
#calculate x and y coords
data.frame(
x = radii[i] * cos(theta),
y = radii[i] * sin(theta),
row = i,
theta = theta
)
})
)
#arrange by angle then row
#assume 'first' party starts in bottom left
pts <- pts[order(-pts$theta, -pts$row), ]
pts
}
#I am reordering the data to reflect the way the Australian parliament is structured (gov't on right, opposition on left) but this isn't strictly neccesary
australia <- australia[c(1, 5, 6, 7, 4, 3, 2), ]
#run your election results through parliament_data()
aus <- parliament_data(election_data = australia, # you need to specify the data frame
total_seats = sum(australia$seats), # sum up the total amount of seats
party_seats = australia$seats, # number of seats per party
parl_rows = 4, # how many rows do we want?
type = "horseshoe") # what type of parliament do we want?
head(aus)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
library(ussc)
library(tidyverse)
library(emo)
library(ggparliament)
australia <- election_data %>% # the data we have included is in election_data
filter(year == 2016 &  # filter for country, year, and legislative chamber
country == "Australia" &
house == "Representatives")
head(australia)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
source("R/parliament_data.R")
source("R/helper_funcs.R")
load("data/election_data.rda")
library(tidyverse)
us_congress <- election_data %>%
filter(country == "USA" &
year == "2016" &
house == "Representatives")
us_congress1 <- parliament_data(election_data = us_congress,
type = "semicircle",
total_seats = sum(us_congress$seats),
parl_rows = 10,
party_names = us_congress$party_short,
party_seats = us_congress$seats)
us_senate <- election_data %>%
filter(country == "USA" &
year == "2016" &
house == "Senate")
us_senate <- parliament_data(
election_data = us_senate,
type = "semicircle",
total_seats = sum(us_senate$seats),
parl_rows = 4,
party_names = us_senate$party_short,
party_seats = us_senate$seats)
ggplot(us_congress1, aes(x, y, colour = party_short)) +
geom_parliament_seats() +
geom_highlight_government(government == 1) +
theme_void() +
labs(colour = "", title = "United States Congress") +
annotate("text", x=0, y=0, label=paste("Total:", sum(us_congress$seats), "Reps"), fontface="bold", size=8) +
scale_colour_manual(values = us_congress1$colour, limits = us_congress1$party_short)
senate <- ggplot(us_senate, aes(x=x, y=y, colour=party_long)) +
geom_parliament_seats() +
geom_highlight_government(government == 1) +
theme_void() +
labs(colour = "",
title = "United States Senate",
subtitle = "Government encircled in black.") +
scale_colour_manual(values = us_senate$colour, limits=us_senate$party_long)
senate
germany <- election_data %>%
filter(year==2017 & country=="Germany")
#View(germany)
germany <- parliament_data(election_data=germany,
total_seats = sum(germany$seats),
parl_rows=10,
party_seats=germany$seats,
type='semicircle')
ggplot(germany, aes(x,y,colour=party_short))+
geom_parliament_seats()+
#geom_highlight_government(government==1) +
labs(colour="Party", title="Germany 2017 Election Results") +
theme_void()+
scale_colour_manual(values = germany$colour, limits=germany$party_short)
australia <- election_data %>%
filter(year == 2016 &
country == "Australia" &
house == "Representatives")
australia <- australia[c(1, 5, 6, 7, 4, 3, 2), ]
aus <- parliament_data(election_data = australia,
total_seats = sum(australia$seats),
party_seats = australia$seats,
parl_rows = 4,
type = "horseshoe")
ggplot(aus, aes(x, y, colour=party_long)) +
geom_parliament_seats() +
theme_void() +
geom_highlight_government(government == 1) +
labs(colour = "", title = "Australia House of Representatives",
subtitle = "Government encircled in black.") +
annotate("text", x=0, y=0, label=paste("Total: 150 MPs"), fontface="bold", size=12) +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
setwd("~/Dropbox (Sydney Uni)/R-LadiesSydney/slides")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
source("R/helper_funcs.R")
load("data/election_data.rda")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
source("R/helper_funcs.R")
load("data/election_data.rda")
library(tidyverse)
library(ggparliament)
australia <- election_data %>% # the data we have included is in election_data
filter(year == 2016 &  # filter for country, year, and legislative chamber
country == "Australia" &
house == "Representatives")
head(australia)
#I am reordering the data to reflect the way the Australian parliament is structured (gov't on right, opposition on left) but this isn't strictly neccesary
australia <- australia[c(1, 5, 6, 7, 4, 3, 2), ]
#run your election results through parliament_data()
aus <- parliament_data(election_data = australia, # you need to specify the data frame
total_seats = sum(australia$seats), # sum up the total amount of seats
party_seats = australia$seats, # number of seats per party
parl_rows = 4, # how many rows do we want?
type = "horseshoe") # what type of parliament do we want?
head(aus)
ggplot(aus, aes(x, y, colour=party_long)) + #define the data frame and how you want to colour the circles
geom_parliament_seats() + # this geom plots the seats
theme_parliament() + # we have created a theme for the package but this is optional
labs(colour = "", title = "Australia House of Representatives") +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
ggplot(aus, aes(x, y, colour=party_long)) + #define the data frame and how you want to colour the circles
geom_parliament_seats() + # this geom plots the seats
theme_void() + # we have created a theme for the package but this is optional
labs(colour = "", title = "Australia House of Representatives") +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
ggplot(aus, aes(x, y, colour=party_long)) +
geom_parliament_seats() +
theme_void() +
geom_highlight_government(government == 1) +
labs(colour = "", title = "Australia House of Representatives",
subtitle = "Government encircled in black.") +
annotate("text", x=0, y=0, label=paste("Total: 150 MPs"), fontface="bold", size=12) +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(ussc)
library(tidyverse)
library(emo)
source("R/parliament_data.R")
source("R/helper_funcs.R")
load("data/election_data.rda")
library(tidyverse)
ggplot(aus, aes(x, y, colour=party_long)) +
geom_parliament_seats() +
theme_void() +
geom_highlight_government(government == 1) +
labs(colour = "", title = "Australia House of Representatives",
subtitle = "Government encircled in black.") +
annotate("text", x=0, y=10, label=paste("Total: 150 MPs"), fontface="bold", size=12) +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
ggplot(aus, aes(x, y, colour=party_long)) +
geom_parliament_seats() +
theme_void() +
geom_highlight_government(government == 1) +
labs(colour = "", title = "Australia House of Representatives",
subtitle = "Government encircled in black.") +
annotate("text", x=0, y=-10, label=paste("Total: 150 MPs"), fontface="bold", size=12) +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
ggplot(aus, aes(x, y, colour=party_long)) +
geom_parliament_seats() +
theme_void() +
geom_highlight_government(government == 1) +
labs(colour = "", title = "Australia House of Representatives",
subtitle = "Government encircled in black.") +
annotate("text", x=0, y=2, label=paste("Total: 150 MPs"), fontface="bold", size=12) +
scale_colour_manual(values = aus$colour, limits = aus$party_long)
